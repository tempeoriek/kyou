@model ProductDetailsModel
@using Nop.Core
@using Nop.Core.Domain.Seo;
@using Nop.Core.Infrastructure;
@using Nop.Services.Localization;
@using Nop.Web.Models.Catalog;
@{
  //Layout = "~/Views/Shared/_LayoutTwo.cshtml";

  //title, meta
  Html.AddTitleParts(!String.IsNullOrEmpty(Model.MetaTitle) ? Model.MetaTitle : Model.Name);
  Html.AddMetaDescriptionParts(Model.MetaDescription);
  Html.AddMetaKeywordParts(Model.MetaKeywords);

  var seoSettings = EngineContext.Current.Resolve<SeoSettings>();

  //canonical URL
  if (seoSettings.CanonicalUrlsEnabled)
  {
    var productUrl = Url.RouteUrl("Product", new { SeName = Model.SeName }, this.Request.Url.Scheme);
    Html.AddCanonicalUrlParts(productUrl);
  }

  //open graph META tags
  if (seoSettings.OpenGraphMetaTags)
  {
    var storeName = EngineContext.Current.Resolve<IStoreContext>().CurrentStore.GetLocalized(x => x.Name);
    Html.AddHeadCustomParts("<meta property=\"og:type\" content=\"product\" />");
    Html.AddHeadCustomParts("<meta property=\"og:title\" content=\"" + Html.Encode(Model.Name) + "\" />");
    Html.AddHeadCustomParts("<meta property=\"og:description\" content=\"" + Html.Encode(Model.MetaDescription) + "\" />");
    Html.AddHeadCustomParts("<meta property=\"og:image\" content=\"" + Model.DefaultPictureModel.ImageUrl + "\" />");
    Html.AddHeadCustomParts("<meta property=\"og:url\" content=\"" + Request.Url.AbsoluteUri + "\" />");
    Html.AddHeadCustomParts("<meta property=\"og:site_name\" content=\"" + Html.Encode(storeName) + "\" />");
  }

  //Twitter META tags
  if (seoSettings.TwitterMetaTags)
  {
    var storeName = EngineContext.Current.Resolve<IStoreContext>().CurrentStore.GetLocalized(x => x.Name);
    Html.AddHeadCustomParts("<meta property=\"twitter:card\" content=\"summary\" />");
    Html.AddHeadCustomParts("<meta property=\"twitter:site\" content=\"" + Html.Encode(storeName) + "\" />");
    Html.AddHeadCustomParts("<meta property=\"twitter:title\" content=\"" + Html.Encode(Model.Name) + "\" />");
    Html.AddHeadCustomParts("<meta property=\"twitter:description\" content=\"" + Html.Encode(Model.MetaDescription) + "\" />");
    Html.AddHeadCustomParts("<meta property=\"twitter:image\" content=\"" + Model.DefaultPictureModel.ImageUrl + "\" />");
    Html.AddHeadCustomParts("<meta property=\"twitter:url\" content=\"" + Request.Url.AbsoluteUri + "\" />");
  }


}




<div class="container product-detail" style="margin-top: 5%;">
  <div class="row">
    <div class="col-12 col-sm-7 col-md-7">
      @Html.Partial("_ProductDetailsPictures", Model)
    </div>

    <div class="col-12 col-sm-5 col-md-5" style="padding: 0 4rem;">
      @using (Html.BeginRouteForm("Product", new { SeName = Model.SeName }, FormMethod.Post, new { id = "product-details-form" }))
      {
        <div itemscope itemtype="http://schema.org/Product" data-productid="@Model.Id" style="margin-top: 5%;">

          <p itemprop="name" style="font-weight: bold; margin-bottom: 1%; color: gray; line-height: 10px; font-size: 14px;">@Model.Name</p>
          @{
            var dataDictPrice = new ViewDataDictionary();
            dataDictPrice.TemplateInfo.HtmlFieldPrefix = string.Format("price_{0}", Model.Id);
            
            @* TESTING *@
            @* Model.AddToCart.AvailableForPreOrder = true; *@

            if (Model.AddToCart.AvailableForPreOrder) {
              <div class="description pb-2" style="color: gray;">
                PRE-ORDER
              </div>
            } else {
              @Html.Partial("_ProductPrice", Model.ProductPrice, dataDictPrice)
            }
          }

          @* <hr class="pb-2" style="margin: 0; border-top: 1px solid lightgray;"> *@
          

          @{
            //notify me if oos
            var totalstock = 0;
            if (Model.ProductAttributeCombinations != null) {
              totalstock = 1;
            } else {
              foreach (var pa in Model.ProductAttributes)
              {
                foreach (var s in pa.Values)
                {
                  totalstock += s.VariantStockQuantity;
                }
              }
            }

          @* logic AvailableForPreOrder *@
            if (totalstock >= 1)
            {
              <div class="row no-gutters">
                @if (Model.ProductAttributeCombinations.Count() > 0) {
                  <div class="col-12">
                    @{
                      var dataDictAttributes = new ViewDataDictionary();
                      dataDictAttributes.TemplateInfo.HtmlFieldPrefix = string.Format("attributes_{0}", Model.Id);
                      @Html.Partial("_ProductAttributes", Model.ProductAttributes, dataDictAttributes)}
                  </div>
                } else {
                  <div class="col-12">
                    @{
                      var dataDictAttributes = new ViewDataDictionary();
                      dataDictAttributes.TemplateInfo.HtmlFieldPrefix = string.Format("attributes_{0}", Model.Id);
                      @Html.Partial("_ProductAttributes", Model.ProductAttributes, dataDictAttributes)}
                  </div>
                }
                @{
                  var dataDictAddToCart = new ViewDataDictionary();
                  dataDictAddToCart.TemplateInfo.HtmlFieldPrefix = string.Format("addtocart_{0}", Model.Id);
                  @Html.Partial("_AddToCart", Model.AddToCart, dataDictAddToCart)
                }
                <div class="description pb-2" style="color: gray;">
                  @Html.Raw(Model.FullDescription)
                </div>
              </div>
            }
            else
            {
              <!--Back in stock subscription-->
              @*@Html.Partial("_BackInStockSubscription", Model)*@

              <p class="out-of-stock" style="font-style:italic;">
                Sorry, this product is completely Sold Out
              </p>

            }
          }

          
        </div>
      }
    </div>

    @* <div class="col-12 col-sm-5 col-md-5 d-block d-md-none mt-4" style="padding: 0 4rem;">
      @using (Html.BeginRouteForm("Product", new { SeName = Model.SeName }, FormMethod.Post, new { id = "product-details-form" }))
      {
        <div itemscope itemtype="http://schema.org/Product" data-productid="@Model.Id" style="margin-top: 5%;">

          <p itemprop="name" style="font-weight: bold; margin-bottom: 1%; color: gray; line-height: 0">@Model.Name</p>
          @{
            var dataDictPrice = new ViewDataDictionary();
            dataDictPrice.TemplateInfo.HtmlFieldPrefix = string.Format("price_{0}", Model.Id);
            
            if (Model.AddToCart.AvailableForPreOrder) {
              <div class="description pb-2" style="color: gray;">
                PRE-ORDER
              </div>
            } else {
              @Html.Partial("_ProductPrice", Model.ProductPrice, dataDictPrice)
            }
          }


          @{
            var totalstock = 0;
            if (Model.ProductAttributeCombinations != null) {
              totalstock = 1;
            } else {
              foreach (var pa in Model.ProductAttributes)
              {
                foreach (var s in pa.Values)
                {
                  totalstock += s.VariantStockQuantity;
                }
              }
            }

            if (totalstock >= 1)
            {
              <div class="row no-gutters">
                @if (Model.ProductAttributeCombinations.Count() > 0) {
                  <div class="col-12">
                    @{
                      var dataDictAttributes = new ViewDataDictionary();
                      dataDictAttributes.TemplateInfo.HtmlFieldPrefix = string.Format("attributes_{0}", Model.Id);
                      @Html.Partial("_ProductAttributes", Model.ProductAttributes, dataDictAttributes)}
                  </div>
                } else {
                  <div class="col-12">
                    @{
                      var dataDictAttributes = new ViewDataDictionary();
                      dataDictAttributes.TemplateInfo.HtmlFieldPrefix = string.Format("attributes_{0}", Model.Id);
                      @Html.Partial("_ProductAttributes", Model.ProductAttributes, dataDictAttributes)}
                  </div>
                }
                @{
                  var dataDictAddToCart = new ViewDataDictionary();
                  dataDictAddToCart.TemplateInfo.HtmlFieldPrefix = string.Format("addtocart_{0}", Model.Id);
                  @Html.Partial("_AddToCart", Model.AddToCart, dataDictAddToCart)
                }
                <div class="description pb-2" style="color: gray;">
                  @Html.Raw(Model.FullDescription)
                </div>
              </div>
            }
            else
            {

              <p class="out-of-stock" style="font-style:italic;">
                Sorry, this product is completely Sold Out
              </p>

            }
          }

          
        </div>
      }
    </div> *@
  </div>
  

      <!-- recommendation--->
      @*Automatic*@
      @* @Html.Action("ProductsAlsoPurchased", "Product", new { productId = Model.Id }) *@

      @*Manual*@
      @* @Html.Action("CrossSellProducts", "Product", new { productId = Model.Id }) *@
</div>

  <script>
    $('.add').click(function () {
      if ($(this).prev().val() < 9) {
        $(this).prev().val(+$(this).prev().val() + 1);
      }
    });
    $('.sub').click(function () {
      if ($(this).next().val() > 1) {
        if ($(this).next().val() > 1) $(this).next().val(+$(this).next().val() - 1);
      }
    });

    function btnclick() {
      if ($(".btn-addcart").innerHTML == "ADD TO BAG") {
        $(".btn-addcart").innerHTML = "✓ SEE BAG";
      }
      else {
        $(".btn-addcart").innerHTML = "ADD TO BAG";
      }
    }
    console.log(`PRODUCT DETAIL`);
    var model = @Html.Raw(Newtonsoft.Json.JsonConvert.SerializeObject(Model));
    console.log(model);    
  </script>
